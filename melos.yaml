name: flakka3
ide:
  intellij:
    moduleNamePrefix: ''
command:
  bootstrap:
    runPubGetOffline: true
    runPubGetInParallel: true
packages:
  - 'packages/*'
  - 'packages/*/*'
  - 'packages/*/*/*'
  - 'packages/*/*/*/*'
ignore:
  #  - packages/core_aggregate/brick_validator/tmp/**
  - packages/core_aggregate/**
  - "**/bricks/*"
  - "**/bricks/**/*"
scripts:
  coverage:clean:
    run: rm -rf coverage
    exec:
      concurrency: 10
    packageFilters:
      dirExists: coverage
  coverage:test:
    run: dart test --coverage=./coverage
    exec:
      concurrency: 1
    packageFilters:
      scope:
        - core_persistence_remote_sembast
#        - core_persistence_local_sembast
      dirExists:
        - 'test'
  coverage:format:
    run: dart pub global run coverage:format_coverage --in=coverage --out=coverage/lcov.info --lcov --report-on=lib  --packages=.dart_tool/package_config.json -b "$MELOS_ROOT_PATH"
    exec:
      concurrency: 1
    packageFilters:
      dirExists: coverage/test
  coverage:combine:
    run: dart pub global run combine_coverage --repo-path="$MELOS_ROOT_PATH"
  coverage:report:
    run: genhtml -o ./coverage/report ./coverage/lcov.info
  coverage:open:
    run: open ./coverage/report/index.html
  doc:
    run: dart doc
    exec:
      concurrency: 20
    packageFilters:
      scope:
        - core_object
        - core_object_store
        - core_data
        - core_data_store
        - core_journal
        - core_journal_store
        - core_application
        - core_application_store

  doc_open:
    run: open doc/api/index.html
    exec:
      concurrency: 20
    packageFilters:
      fileExists: doc/api/index.html

  test:build: melos exec --depends-on=build --dir-exists=test -c 1 --  dart pub global run coverage:test_with_coverage
  dart_fix: melos exec -- "dart fix --dry-run"
  dart_fix_apply: "dart fix --apply"
  pub_get:
    name: pub_get
    run: "flutter pub get"
    exec:
      concurrency: 20
  index_generator:
    run: |
      melos exec --diff=HEAD -c 43 -- \
        flutter pub global run index_generator
  index_generator:all:
    run: |
      melos exec -c 30 -- \
        flutter pub global run index_generator
  build_watcher:
    run: flutter pub run build_runner watch --delete-conflicting-outputs
    exec:
      concurrency: 45
    packageFilters:
      scope:

  watch:
    run: |
      melos exec --depends-on=build_runner -c 35 \
        --include-dependencies \
        --ignore e2e_core_aggregate_test_integration \
        -- \
        flutter pub run build_runner watch --delete-conflicting-outputs --enable-experiment records --enable-experiment class-modifiers
  test:
    run: |
      melos exec \
        --dir-exists="test" \
        --no-flutter \
        -- dart test
  open_coverage:
    run: |
      melos exec \
        --file-exists="coverage/lcov.info" \
        --ignore="core_entry_store_firestore" \
        -- genhtml coverage/lcov.info -o coverage --dark-mode && open coverage/index.html
  integration_test:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test integration_test --coverage "
    description: Run `flutter test` for a specific package.
    packageFilters:
      dirExists:
        - integration_test
      ignore:
        - '*example*'
  test:flutter:coverage:
    run: |
      melos exec \
        --flutter \
        --dir-exists="test" \
        -- flutter test --coverage
  coverage:genhtml:
    run: |
      melos exec \
        --dir-exists="coverage" \
        -- genhtml coverage/lcov.info -o coverage/html
  coverage:view:
    run: |
      melos exec \
        --dir-exists="coverage" \
        -- open coverage/html/index.html
  test:integration:
    run: |
      melos exec \
        --dir-exists="integration_test" \
        -- very_good test --coverage integration_test
  test:test:
    run: |
      melos exec \
        --dir-exists="test" \
        --ignore flutter_core_event_source \
        -- very_good test --coverage test
  # From FlutterFire
  lint:all:
    run: melos run analyze && melos run format
    description: Run all static analysis checks.
  analyze:
    # We are setting the concurrency to 1 because a higher concurrency can crash
    # the analysis server on low performance machines (like GitHub Actions).
    run: |
      melos exec -c 1 -- \
        dart analyze . --fatal-infos
    description: |
      Run `dart analyze` in all packages.
       - Note: you can also rely on your IDEs Dart Analysis / Issues window.
  firebase:emulator:
    run: |
      cd .github/workflows/scripts && ./start-firebase-emulator.sh
    description: |
      Start the Firebase emulator suite. Used by Functions, Firestore, Auth and Storage
      integration testing.
       - Requires Node.js and NPM installed.
  format:
    run: |
      dart pub global run flutter_plugin_tools format
  test:all:
    run: "melos run test --no-select && \\ \nmelos run test:e2e --no-select\n"
    description: |
      Run all tests available.
    #  test:
    #    run: |
    #      melos exec -c 6 --fail-fast -- \
    #        "flutter test"
    #    description: Run `flutter test` for a specific package.
    #    packageFilters:
    #      dirExists:
    #        - test
    #      ignore:
    #        - '*web*'
    #        - '*odm*'
    #        - '*example*'
  test:e2e:
    run: |
      melos exec -c 1 --fail-fast -- \
        "flutter test integration_test/e2e_test.dart --coverage --coverage-path=coverage/integration_lcov.info"
    description: |
      Run all e2e tests.
    packageFilters:
      dirExists:
        - integration_test
  #      scope: '*tests*'

  test:e2e:web:
    run: |
      melos exec -c 1 --fail-fast -- \
        "flutter drive --target=./integration_test/e2e_test.dart --driver=./test_driver/integration_test.dart -d chrome"
    description: |
      Run all e2e tests on web platform. Please ensure you have "chromedriver" installed and running.
    packageFilters:
      dirExists:
        - test_driver
      scope: '*tests*'
  clean:deep:
    run: git clean -x -d -f -q
    description: Clean things very deeply, can be used to establish "pristine checkout" status.
  qualitycheck:
    run: |
      melos run clean:deep && \
      melos clean && \
      melos bootstrap && \
      melos run lint:all && \
      melos run build:all && \
      melos run test:all
    description: Run all targets generally expected in CI for a full local quality check.
  # Additional cleanup lifecycle script, executed when `melos clean` is run.
  postclean: >
    melos exec -c 6 -- "flutter clean"
